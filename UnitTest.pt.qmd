---
title: Testes unit√°rios
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: slide
---

# Testes unit√°rios

![](./img/unit-test-intro.jpeg){fig-alt="Imagem do Teste Unit√°rio" height=200}

## O que s√£o?

S√£o processos onde pequenas unidades de c√≥digo funcional s√£o testadas, (√© um bloco de c√≥digo
que verifica a veracidade de um pequeno bloco de c√≥digo isolado de uma aplica√ß√£o,
geralmente uma fun√ß√£o)

# Benef√≠cios

## Ajuda a detectar erros

Se existem erros de entrada, sa√≠da ou na l√≥gica, os testes nos ajudar√£o a detect√°-los
de maneira precoce.

No desenvolvimento, muitas mudan√ßas s√£o feitas, os testes esperam os mesmos resultados,
ent√£o tamb√©m podemos detectar onde os erros ocorrem.

## Documenta√ß√£o

Os testes atuam como uma forma de documenta√ß√£o, pois se sabe exatamente o que se
sup√µe que o c√≥digo deve fazer.

# Estrat√©gias

Com essas perguntas, podemos seguir estrat√©gias para escrever testes unit√°rios.

## Valida√ß√£o de l√≥gica

- Os c√°lculos corretos s√£o realizados?
- O caminho correto √© seguido com uma entrada correta?
- Diferentes casos s√£o cobertos pelas entradas fornecidas?

### Exemplos

- Considerando uma fun√ß√£o que ordena alfabeticamente um array de palavras.

function ordenarPalavras(palavras, ordem? = "ascendente") {
  let copia = [...palavras];
  copia.sort();
  if (ordem === "descendente") {
    copia.reverse();
  }
  return copia;
}

- O array est√° ordenado?
- Ele ordena de forma descendente se receber descendente?


## Valida√ß√£o de limites

  Como ele responde a entradas t√≠picas, casos limite ou entradas inv√°lidas?

### Exemplos

- Considerando uma fun√ß√£o que ordena alfabeticamente um array de palavras.

function ordenarPalavras(palavras, ordem? = "ascendente") {
  let copia = [...palavras];
  copia.sort();
  if (ordem === "descendente") {
    copia.reverse();
  }
  return copia;
}

- O que acontece se o array estiver vazio, nulo ou indefinido?
- O que acontece se o array contiver um tipo de dados diferente?

## Tratamento de erros

Quando h√° erros nas entradas, como o sistema responde?

### Exemplos

- Considerando uma fun√ß√£o que ordena alfabeticamente um array de palavras.

function ordenarPalavras(palavras, ordem? = "ascendente") {
  let copia = [...palavras];
  copia.sort();
  if (ordem === "descendente") {
    copia.reverse();
  }
  return copia;
}

- O que acontece se, em vez de enviar um array, enviar outro tipo de dado?


## Caracter√≠sticas de um bom teste unit√°rio

- R√°pido: Alguns projetos podem ter muitos testes unit√°rios, √© importante que
demorem pouco para serem executados.
- Isolados: √â fundamental que sejam independentes, que n√£o precisem de nenhum fator externo para
funcionar.
- Repet√≠vel: Deve sempre retornar o mesmo resultado em cada execu√ß√£o
- Auto-validado: deve ser capaz de detectar por si s√≥ se passa ou n√£o sem intera√ß√£o humana.
- Oportuno: Escrever o teste n√£o deve levar muito mais tempo do que o c√≥digo que
se deseja testar.

# Cobertura

Uma alta porcentagem de cobertura pode significar uma maior qualidade do c√≥digo. No entanto, n√£o pode determinar a qualidade do c√≥digo. (Est√° tudo bem se voc√™ n√£o atingir 100% de cobertura, n√£o se pressione üòä)

# Um pouco de terminologia

Um componente importante ao escrever testes unit√°rios √© eliminar todas as depend√™ncias. Para fazer isso, nos deparamos com o termo **fun√ß√£o mock**:

Permite que voc√™ tenha um comportamento predefinido que substitui o comportamento real, capturando as chamadas para essas fun√ß√µes e substituindo sua implementa√ß√£o.

√â muito √∫til ao usar servi√ßos de terceiros (como o Firebase)

# Nomeando os testes

O nome do seu teste deve considerar estas partes:

    - O nome do m√©todo que ser√° testado
    - O cen√°rio
    - E o que se espera ao ser executado sob esse cen√°rio

## Exemplo:

- Considerando uma fun√ß√£o que ordena alfabeticamente um array de palavras.

function ordenarPalavras(palavras, ordem? = "ascendente") {
  let copia = [...palavras];
  copia.sort();
  if (ordem === "descendente") {
    copia.reverse();
  }
  return copia;
}

Ordenar por nome array vazio retorna array vazio.


### Por qu√™?

Nomear de maneira padr√£o √© importante porque expressa a inten√ß√£o expl√≠cita de um teste

# Bibliografia:

- [O que √© teste unit√°rio? - Teste unit√°rio explicado - AWS (amazon.com)](https://aws.amazon.com/what-is/unit-testing/)
- [Melhores pr√°ticas para escrever testes unit√°rios - .NET | Aprenda Microsoft)](https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices)
- [Fun√ß√µes Mock ¬∑ Jest (jestjs.io)](https://jestjs.io/docs/mock-functions)
- [Mocking em testes unit√°rios - Code With Engineering Playbook (microsoft.github.io)](https://microsoft.github.io/code-with-engineering-playbook/automated-testing/unit-testing/mocking/#best-practices)
